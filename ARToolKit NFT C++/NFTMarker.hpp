//================================================================================//
// NFTMarker
//	- Class to represent an ARToolkit Natural Feature Tracking Marker.
//--------------------------------------------------------------------------------//
// AUTHOR: Glen Straughn
// DATE: 04.05.2017
// COMPILER: Microsoft Visual C++
//================================================================================//

#pragma once
#include<AR/ar.h>
#include<AR2/tracking.h>
#include<AR/arFilterTransMat.h>
#include<KPM/kpm.h>
#include<glm/glm.hpp>

#include<string>
#include<fstream>

#include "TypeDef.hpp"
#include "ARMarker.hpp"


class NFTMarker
{
public:
	// CONSTRUCTORS, DESTRUCTORS, AND INITIALIZATION
	NFTMarker();
	NFTMarker(std::string& markerName,
		ARfloat cutOffFreqency = AR_FILTER_TRANS_MAT_CUTOFF_FREQ_DEFAULT,
		ARfloat filterSampleRate = AR_FILTER_TRANS_MAT_SAMPLE_RATE_DEFAULT);
	~NFTMarker();

	// PUBLIC MEMBER FUNCTIONS
	bool init(const std::string &dataSetPath, ARParamLT* p_cameraParam, AR_PIXEL_FORMAT pixelFormat);//bool init(KpmRefDataSet* &p_cummulativeKPMRefDataSet);
	bool filterTransformationMatrix();

	// GETTERS & SETTERS
	bool isValid() const;
	//bool wasValid() const;
	inline void setState(MarkerState state) { m_state = state; }
	inline MarkerState getState() const { return m_state; }

	inline void setTransform(ARfloat t[3][4]) { for (int i = 0; i < 3; i++) for (int j = 0; j < 4; j++) m_trans[i][j] = t[i][j]; };
	
	// Returns pose with offset applied.
	ARPose getPose() const;
	// Returns pose without offset.
	ARPose getRawPose() const;
	ARPose getOffset() const;

	inline ARdouble getMarkerWidth() const { return m_markerWidth; }
	inline ARdouble getMarkerHeight() const { return m_markerHeight; }

	//inline ARFilterTransMatInfo* getFTMatInfoPtr() const { return mp_ftmi; }

	inline ARdouble getFilterCutOffFrequency() const { return m_filterCutoffFrequency; }
	inline void setFilterCutOffFrequency(ARdouble fcof) { m_filterCutoffFrequency = fcof; }

	inline ARdouble getFilterSampleRate() const { return m_filterSampleRate; }
	inline void setFilterSamplerRate(ARdouble sampleRate) { m_filterSampleRate = sampleRate; }

	inline int getMarkerID() const { return m_markerID; }
	
	inline void setName(std::string &pathName) { m_name = pathName; }
	inline std::string getName() { return m_name; }

	inline AR2SurfaceSetT* getSurfaceSetPtr() const { return mp_surfaceSet; }

	inline void setOffset(glm::mat4x4 offset) { m_offset = offset; }

	inline ARfloat getError() { return m_error; }
	inline void setError(ARfloat error) { m_error = error; }

	inline KpmHandle* getKpmHandlePtr() { return mp_kpmHandle; }
	
private:
	// MEMBER DATA
	MarkerState m_state;
	ARdouble    m_trans[3][4];
	ARPose		m_offset;		// Offset for 3D marker tracking
	ARdouble    m_markerWidth;
	ARdouble    m_markerHeight;

	ARFilterTransMatInfo *mp_ftmi;
	ARdouble    m_filterCutoffFrequency;
	ARdouble    m_filterSampleRate;

	int         m_markerID; // Unique ID generated by ARToolkit, I think...
	ARfloat		m_error;
	std::string m_name;

	AR2SurfaceSetT *mp_surfaceSet; // Feature point struct?
	KpmHandle* mp_kpmHandle;
};
typedef NFTMarker NaturalFeatureTrackingMarker;